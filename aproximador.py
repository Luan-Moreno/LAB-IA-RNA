# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xMjn5LyT9i1jaItHBg2esXVQTY-qzAHo
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.neural_network import MLPRegressor
from sklearn.preprocessing import MaxAbsScaler

# %matplotlib inline

arquivo = np.load("teste1.npy")
x = arquivo[0]
y = arquivo[1]

plt.figure(figsize=(16,8))
plt.plot(x,y)
plt.show()

regr = MLPRegressor(hidden_layer_sizes = (2,2),
                    max_iter = 10000,
                    solver='adam',
                    learning_rate="adaptive",
                    n_iter_no_change=1000)

regr = regr.fit(x,y)
y_est = regr.predict(x)

arquivos = ['teste2.npy', 'teste3.npy', 'teste4.npy', 'teste5.npy']
iteracoes = 400
arquiteturas = [(10,), (15, 5), (20, 10, 5)]

for arquivo in arquivos:
    print(f'Carregando {arquivo}')
    dados = np.load(arquivo)
    x = dados[0]

    scale = MaxAbsScaler().fit(dados[1])
    y = np.ravel(scale.transform(dados[1]))

    for arq in arquiteturas:
        erros = []

        for i in range(10):
            regr = MLPRegressor(hidden_layer_sizes=arq,
                                max_iter=iteracoes,
                                activation='tanh',
                                solver='adam',
                                learning_rate='adaptive')
            regr.fit(x, y)
            y_est = regr.predict(x)
            erro = np.mean((y - y_est) ** 2)
            erros.append(erro)

        media = np.mean(erros)
        desvio = np.std(erros)
        print(f'Arq: {arq} - Media: {media:.5f} - Desvio: {desvio:.5f}')

        melhor_index = np.argmin(erros)
        plt.figure()
        plt.title(f'{arquivo} - Arq: {arq} - Erro: {erros[melhor_index]:.5f}')
        plt.plot(x, y, label='Original', color='green')
        plt.plot(x, regr.predict(x), label='Aproximado', color='blue')
        plt.legend()
        plt.show()